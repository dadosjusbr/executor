// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.14.0
// source: structs.proto

package executor

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type StageExecution_Status int32

const (
	StageExecution_OK             StageExecution_Status = 0
	StageExecution_SETUP_ERROR    StageExecution_Status = 1
	StageExecution_BUILD_ERROR    StageExecution_Status = 2
	StageExecution_RUN_ERROR      StageExecution_Status = 3
	StageExecution_TEARDOWN_ERROR StageExecution_Status = 4
)

// Enum value maps for StageExecution_Status.
var (
	StageExecution_Status_name = map[int32]string{
		0: "OK",
		1: "SETUP_ERROR",
		2: "BUILD_ERROR",
		3: "RUN_ERROR",
		4: "TEARDOWN_ERROR",
	}
	StageExecution_Status_value = map[string]int32{
		"OK":             0,
		"SETUP_ERROR":    1,
		"BUILD_ERROR":    2,
		"RUN_ERROR":      3,
		"TEARDOWN_ERROR": 4,
	}
)

func (x StageExecution_Status) Enum() *StageExecution_Status {
	p := new(StageExecution_Status)
	*p = x
	return p
}

func (x StageExecution_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StageExecution_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_structs_proto_enumTypes[0].Descriptor()
}

func (StageExecution_Status) Type() protoreflect.EnumType {
	return &file_structs_proto_enumTypes[0]
}

func (x StageExecution_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StageExecution_Status.Descriptor instead.
func (StageExecution_Status) EnumDescriptor() ([]byte, []int) {
	return file_structs_proto_rawDescGZIP(), []int{2, 0}
}

type PipelineExecution struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pipeline         *PipelineDef      `protobuf:"bytes,1,opt,name=pipeline,proto3" json:"pipeline,omitempty"`
	SetupErrorMsg    string            `protobuf:"bytes,2,opt,name=setup_error_msg,json=setupErrorMsg,proto3" json:"setup_error_msg,omitempty"`
	Results          []*StageExecution `protobuf:"bytes,3,rep,name=results,proto3" json:"results,omitempty"`
	TeardownErrorMsg string            `protobuf:"bytes,4,opt,name=teardown_error_msg,json=teardownErrorMsg,proto3" json:"teardown_error_msg,omitempty"`
}

func (x *PipelineExecution) Reset() {
	*x = PipelineExecution{}
	if protoimpl.UnsafeEnabled {
		mi := &file_structs_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PipelineExecution) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PipelineExecution) ProtoMessage() {}

func (x *PipelineExecution) ProtoReflect() protoreflect.Message {
	mi := &file_structs_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PipelineExecution.ProtoReflect.Descriptor instead.
func (*PipelineExecution) Descriptor() ([]byte, []int) {
	return file_structs_proto_rawDescGZIP(), []int{0}
}

func (x *PipelineExecution) GetPipeline() *PipelineDef {
	if x != nil {
		return x.Pipeline
	}
	return nil
}

func (x *PipelineExecution) GetSetupErrorMsg() string {
	if x != nil {
		return x.SetupErrorMsg
	}
	return ""
}

func (x *PipelineExecution) GetResults() []*StageExecution {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *PipelineExecution) GetTeardownErrorMsg() string {
	if x != nil {
		return x.TeardownErrorMsg
	}
	return ""
}

type PipelineDef struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name                 string            `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	DefaultBaseDir       string            `protobuf:"bytes,2,opt,name=default_base_dir,json=defaultBaseDir,proto3" json:"default_base_dir,omitempty"`
	DefaultBuildEnv      map[string]string `protobuf:"bytes,3,rep,name=default_build_env,json=defaultBuildEnv,proto3" json:"default_build_env,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	DefaultRunEnv        map[string]string `protobuf:"bytes,4,rep,name=default_run_env,json=defaultRunEnv,proto3" json:"default_run_env,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	VolumeDir            string            `protobuf:"bytes,5,opt,name=volume_dir,json=volumeDir,proto3" json:"volume_dir,omitempty"`
	SkipVolumeDirCleanup bool              `protobuf:"varint,6,opt,name=skip_volume_dir_cleanup,json=skipVolumeDirCleanup,proto3" json:"skip_volume_dir_cleanup,omitempty"`
	Stages               []*StageDef       `protobuf:"bytes,7,rep,name=stages,proto3" json:"stages,omitempty"`
	ErrorHander          *StageDef         `protobuf:"bytes,8,opt,name=error_hander,json=errorHander,proto3" json:"error_hander,omitempty"`
}

func (x *PipelineDef) Reset() {
	*x = PipelineDef{}
	if protoimpl.UnsafeEnabled {
		mi := &file_structs_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PipelineDef) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PipelineDef) ProtoMessage() {}

func (x *PipelineDef) ProtoReflect() protoreflect.Message {
	mi := &file_structs_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PipelineDef.ProtoReflect.Descriptor instead.
func (*PipelineDef) Descriptor() ([]byte, []int) {
	return file_structs_proto_rawDescGZIP(), []int{1}
}

func (x *PipelineDef) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PipelineDef) GetDefaultBaseDir() string {
	if x != nil {
		return x.DefaultBaseDir
	}
	return ""
}

func (x *PipelineDef) GetDefaultBuildEnv() map[string]string {
	if x != nil {
		return x.DefaultBuildEnv
	}
	return nil
}

func (x *PipelineDef) GetDefaultRunEnv() map[string]string {
	if x != nil {
		return x.DefaultRunEnv
	}
	return nil
}

func (x *PipelineDef) GetVolumeDir() string {
	if x != nil {
		return x.VolumeDir
	}
	return ""
}

func (x *PipelineDef) GetSkipVolumeDirCleanup() bool {
	if x != nil {
		return x.SkipVolumeDirCleanup
	}
	return false
}

func (x *PipelineDef) GetStages() []*StageDef {
	if x != nil {
		return x.Stages
	}
	return nil
}

func (x *PipelineDef) GetErrorHander() *StageDef {
	if x != nil {
		return x.ErrorHander
	}
	return nil
}

type StageExecution struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartTime   *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`       // Beginning of the process execution.
	FinishTime  *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=finish_time,json=finishTime,proto3" json:"finish_time,omitempty"`    // End of the process execution.
	ContainerId string                 `protobuf:"bytes,3,opt,name=container_id,json=containerId,proto3" json:"container_id,omitempty"` // Name of the container used to locally run the stage
	CommitId    string                 `protobuf:"bytes,4,opt,name=commit_id,json=commitId,proto3" json:"commit_id,omitempty"`          // Commit id of the stage. Only set when repo is set.
	Setup       *StepExecution         `protobuf:"bytes,5,opt,name=setup,proto3" json:"setup,omitempty"`                                // Details of the stage setup.
	Build       *StepExecution         `protobuf:"bytes,6,opt,name=build,proto3" json:"build,omitempty"`                                // Details of the stage build.
	Run         *StepExecution         `protobuf:"bytes,7,opt,name=run,proto3" json:"run,omitempty"`                                    // Details of the stage run.
	Teardown    *StepExecution         `protobuf:"bytes,8,opt,name=teardown,proto3" json:"teardown,omitempty"`                          // Details of the stage teardown.
	Status      StageExecution_Status  `protobuf:"varint,9,opt,name=status,proto3,enum=StageExecution_Status" json:"status,omitempty"`  // Summary status of the stage execution.
}

func (x *StageExecution) Reset() {
	*x = StageExecution{}
	if protoimpl.UnsafeEnabled {
		mi := &file_structs_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StageExecution) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StageExecution) ProtoMessage() {}

func (x *StageExecution) ProtoReflect() protoreflect.Message {
	mi := &file_structs_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StageExecution.ProtoReflect.Descriptor instead.
func (*StageExecution) Descriptor() ([]byte, []int) {
	return file_structs_proto_rawDescGZIP(), []int{2}
}

func (x *StageExecution) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *StageExecution) GetFinishTime() *timestamppb.Timestamp {
	if x != nil {
		return x.FinishTime
	}
	return nil
}

func (x *StageExecution) GetContainerId() string {
	if x != nil {
		return x.ContainerId
	}
	return ""
}

func (x *StageExecution) GetCommitId() string {
	if x != nil {
		return x.CommitId
	}
	return ""
}

func (x *StageExecution) GetSetup() *StepExecution {
	if x != nil {
		return x.Setup
	}
	return nil
}

func (x *StageExecution) GetBuild() *StepExecution {
	if x != nil {
		return x.Build
	}
	return nil
}

func (x *StageExecution) GetRun() *StepExecution {
	if x != nil {
		return x.Run
	}
	return nil
}

func (x *StageExecution) GetTeardown() *StepExecution {
	if x != nil {
		return x.Teardown
	}
	return nil
}

func (x *StageExecution) GetStatus() StageExecution_Status {
	if x != nil {
		return x.Status
	}
	return StageExecution_OK
}

type StepExecution struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Stdin      string                 `protobuf:"bytes,1,opt,name=stdin,proto3" json:"stdin,omitempty"`                              // String containing the standard input of the process.
	Stdout     string                 `protobuf:"bytes,2,opt,name=stdout,proto3" json:"stdout,omitempty"`                            // String containing the standard output of the process.
	Stderr     string                 `protobuf:"bytes,3,opt,name=stderr,proto3" json:"stderr,omitempty"`                            // String containing the standard error of the process.
	Cmd        string                 `protobuf:"bytes,4,opt,name=cmd,proto3" json:"cmd,omitempty"`                                  // Command that has been executed
	CmdDir     string                 `protobuf:"bytes,5,opt,name=cmd_dir,json=cmdDir,proto3" json:"cmd_dir,omitempty"`              // Local directory, in which the command has been executed
	StatusCode int32                  `protobuf:"varint,6,opt,name=status_code,json=statusCode,proto3" json:"status_code,omitempty"` // Exit code of the process executed
	Env        []string               `protobuf:"bytes,7,rep,name=env,proto3" json:"env,omitempty"`                                  // Copy of strings representing the environment variables in the form ke=value
	StartTime  *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`     // Beginning of the process execution.
	FinishTime *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=finish_time,json=finishTime,proto3" json:"finish_time,omitempty"`  // End of the process execution.
}

func (x *StepExecution) Reset() {
	*x = StepExecution{}
	if protoimpl.UnsafeEnabled {
		mi := &file_structs_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StepExecution) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StepExecution) ProtoMessage() {}

func (x *StepExecution) ProtoReflect() protoreflect.Message {
	mi := &file_structs_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StepExecution.ProtoReflect.Descriptor instead.
func (*StepExecution) Descriptor() ([]byte, []int) {
	return file_structs_proto_rawDescGZIP(), []int{3}
}

func (x *StepExecution) GetStdin() string {
	if x != nil {
		return x.Stdin
	}
	return ""
}

func (x *StepExecution) GetStdout() string {
	if x != nil {
		return x.Stdout
	}
	return ""
}

func (x *StepExecution) GetStderr() string {
	if x != nil {
		return x.Stderr
	}
	return ""
}

func (x *StepExecution) GetCmd() string {
	if x != nil {
		return x.Cmd
	}
	return ""
}

func (x *StepExecution) GetCmdDir() string {
	if x != nil {
		return x.CmdDir
	}
	return ""
}

func (x *StepExecution) GetStatusCode() int32 {
	if x != nil {
		return x.StatusCode
	}
	return 0
}

func (x *StepExecution) GetEnv() []string {
	if x != nil {
		return x.Env
	}
	return nil
}

func (x *StepExecution) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *StepExecution) GetFinishTime() *timestamppb.Timestamp {
	if x != nil {
		return x.FinishTime
	}
	return nil
}

type StageDef struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name              string            `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`                                                                                                                 // Stage's name.
	Dir               string            `protobuf:"bytes,2,opt,name=dir,proto3" json:"dir,omitempty"`                                                                                                                   // Directory to be concatenated with default base directory or with the base directory specified here in 'BaseDir'. This field is used to name the image built.
	BaseDir           string            `protobuf:"bytes,3,opt,name=base_dir,json=baseDir,proto3" json:"base_dir,omitempty"`                                                                                            // Base directory for the stage. This field overwrites the DefaultBaseDir in pipeline's definition.
	BuildEnv          map[string]string `protobuf:"bytes,4,rep,name=build_env,json=buildEnv,proto3" json:"build_env,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // Variables to be used in the stage build. They will be concatenated with the default variables defined in the pipeline, overwriting them if repeated.
	RunEnv            map[string]string `protobuf:"bytes,5,rep,name=run_env,json=runEnv,proto3" json:"run_env,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`       // Variables to be used in the stage run. They will be concatenated with the default variables defined in the pipeline, overwriting them if repeated.
	Repo              string            `protobuf:"bytes,6,opt,name=repo,proto3" json:"repo,omitempty"`                                                                                                                 // Repository URL from where to clone the pipeline stage.
	RepoVersionEnvVar string            `protobuf:"bytes,7,opt,name=repo_version_env_var,json=repoVersionEnvVar,proto3" json:"repo_version_env_var,omitempty"`                                                          // Name of the environment variable passed to build and run that represents the stage commit id (only when Repo is set).
}

func (x *StageDef) Reset() {
	*x = StageDef{}
	if protoimpl.UnsafeEnabled {
		mi := &file_structs_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StageDef) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StageDef) ProtoMessage() {}

func (x *StageDef) ProtoReflect() protoreflect.Message {
	mi := &file_structs_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StageDef.ProtoReflect.Descriptor instead.
func (*StageDef) Descriptor() ([]byte, []int) {
	return file_structs_proto_rawDescGZIP(), []int{4}
}

func (x *StageDef) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *StageDef) GetDir() string {
	if x != nil {
		return x.Dir
	}
	return ""
}

func (x *StageDef) GetBaseDir() string {
	if x != nil {
		return x.BaseDir
	}
	return ""
}

func (x *StageDef) GetBuildEnv() map[string]string {
	if x != nil {
		return x.BuildEnv
	}
	return nil
}

func (x *StageDef) GetRunEnv() map[string]string {
	if x != nil {
		return x.RunEnv
	}
	return nil
}

func (x *StageDef) GetRepo() string {
	if x != nil {
		return x.Repo
	}
	return ""
}

func (x *StageDef) GetRepoVersionEnvVar() string {
	if x != nil {
		return x.RepoVersionEnvVar
	}
	return ""
}

var File_structs_proto protoreflect.FileDescriptor

var file_structs_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0xbe, 0x01, 0x0a, 0x11, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x45, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x08, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69,
	0x6e, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x50, 0x69, 0x70, 0x65, 0x6c,
	0x69, 0x6e, 0x65, 0x44, 0x65, 0x66, 0x52, 0x08, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65,
	0x12, 0x26, 0x0a, 0x0f, 0x73, 0x65, 0x74, 0x75, 0x70, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f,
	0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x65, 0x74, 0x75, 0x70,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x73, 0x67, 0x12, 0x29, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x53, 0x74, 0x61, 0x67,
	0x65, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x74, 0x65, 0x61, 0x72, 0x64, 0x6f, 0x77, 0x6e, 0x5f,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x73, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x10, 0x74, 0x65, 0x61, 0x72, 0x64, 0x6f, 0x77, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x73,
	0x67, 0x22, 0x90, 0x04, 0x0a, 0x0b, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x44, 0x65,
	0x66, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x5f, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x64, 0x69, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x42, 0x61, 0x73, 0x65, 0x44, 0x69, 0x72, 0x12,
	0x4d, 0x0a, 0x11, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x62, 0x75, 0x69, 0x6c, 0x64,
	0x5f, 0x65, 0x6e, 0x76, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x50, 0x69, 0x70,
	0x65, 0x6c, 0x69, 0x6e, 0x65, 0x44, 0x65, 0x66, 0x2e, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x42, 0x75, 0x69, 0x6c, 0x64, 0x45, 0x6e, 0x76, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0f, 0x64,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x45, 0x6e, 0x76, 0x12, 0x47,
	0x0a, 0x0f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x72, 0x75, 0x6e, 0x5f, 0x65, 0x6e,
	0x76, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69,
	0x6e, 0x65, 0x44, 0x65, 0x66, 0x2e, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x52, 0x75, 0x6e,
	0x45, 0x6e, 0x76, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x52, 0x75, 0x6e, 0x45, 0x6e, 0x76, 0x12, 0x1d, 0x0a, 0x0a, 0x76, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x5f, 0x64, 0x69, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x76, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x44, 0x69, 0x72, 0x12, 0x35, 0x0a, 0x17, 0x73, 0x6b, 0x69, 0x70, 0x5f, 0x76,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f, 0x64, 0x69, 0x72, 0x5f, 0x63, 0x6c, 0x65, 0x61, 0x6e, 0x75,
	0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x73, 0x6b, 0x69, 0x70, 0x56, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x44, 0x69, 0x72, 0x43, 0x6c, 0x65, 0x61, 0x6e, 0x75, 0x70, 0x12, 0x21, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x67, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x09, 0x2e,
	0x53, 0x74, 0x61, 0x67, 0x65, 0x44, 0x65, 0x66, 0x52, 0x06, 0x73, 0x74, 0x61, 0x67, 0x65, 0x73,
	0x12, 0x2c, 0x0a, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x68, 0x61, 0x6e, 0x64, 0x65, 0x72,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x53, 0x74, 0x61, 0x67, 0x65, 0x44, 0x65,
	0x66, 0x52, 0x0b, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x48, 0x61, 0x6e, 0x64, 0x65, 0x72, 0x1a, 0x42,
	0x0a, 0x14, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x45, 0x6e,
	0x76, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x1a, 0x40, 0x0a, 0x12, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x52, 0x75, 0x6e,
	0x45, 0x6e, 0x76, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0xe9, 0x03, 0x0a, 0x0e, 0x53, 0x74, 0x61, 0x67, 0x65, 0x45, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x39, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x0a, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x49, 0x64, 0x12,
	0x24, 0x0a, 0x05, 0x73, 0x65, 0x74, 0x75, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x53, 0x74, 0x65, 0x70, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05,
	0x73, 0x65, 0x74, 0x75, 0x70, 0x12, 0x24, 0x0a, 0x05, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x53, 0x74, 0x65, 0x70, 0x45, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x12, 0x20, 0x0a, 0x03, 0x72,
	0x75, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x53, 0x74, 0x65, 0x70, 0x45,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x03, 0x72, 0x75, 0x6e, 0x12, 0x2a, 0x0a,
	0x08, 0x74, 0x65, 0x61, 0x72, 0x64, 0x6f, 0x77, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x53, 0x74, 0x65, 0x70, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x08, 0x74, 0x65, 0x61, 0x72, 0x64, 0x6f, 0x77, 0x6e, 0x12, 0x2e, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x53, 0x74, 0x61, 0x67,
	0x65, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x55, 0x0a, 0x06, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x06, 0x0a, 0x02, 0x4f, 0x4b, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x53,
	0x45, 0x54, 0x55, 0x50, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b,
	0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x02, 0x12, 0x0d, 0x0a,
	0x09, 0x52, 0x55, 0x4e, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x03, 0x12, 0x12, 0x0a, 0x0e,
	0x54, 0x45, 0x41, 0x52, 0x44, 0x4f, 0x57, 0x4e, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x04,
	0x22, 0xab, 0x02, 0x0a, 0x0d, 0x53, 0x74, 0x65, 0x70, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x64, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x73, 0x74, 0x64, 0x69, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x64, 0x6f,
	0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x64, 0x6f, 0x75, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x64, 0x65, 0x72, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x73, 0x74, 0x64, 0x65, 0x72, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x6d,
	0x64, 0x5f, 0x64, 0x69, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x6d, 0x64,
	0x44, 0x69, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x6e, 0x76, 0x18, 0x07, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x03, 0x65, 0x6e, 0x76, 0x12, 0x39, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x0a, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xee,
	0x02, 0x0a, 0x08, 0x53, 0x74, 0x61, 0x67, 0x65, 0x44, 0x65, 0x66, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x10, 0x0a, 0x03, 0x64, 0x69, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x64, 0x69,
	0x72, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x64, 0x69, 0x72, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x61, 0x73, 0x65, 0x44, 0x69, 0x72, 0x12, 0x34, 0x0a, 0x09,
	0x62, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x65, 0x6e, 0x76, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x53, 0x74, 0x61, 0x67, 0x65, 0x44, 0x65, 0x66, 0x2e, 0x42, 0x75, 0x69, 0x6c, 0x64,
	0x45, 0x6e, 0x76, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x45,
	0x6e, 0x76, 0x12, 0x2e, 0x0a, 0x07, 0x72, 0x75, 0x6e, 0x5f, 0x65, 0x6e, 0x76, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x53, 0x74, 0x61, 0x67, 0x65, 0x44, 0x65, 0x66, 0x2e, 0x52,
	0x75, 0x6e, 0x45, 0x6e, 0x76, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x72, 0x75, 0x6e, 0x45,
	0x6e, 0x76, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x65, 0x70, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x72, 0x65, 0x70, 0x6f, 0x12, 0x2f, 0x0a, 0x14, 0x72, 0x65, 0x70, 0x6f, 0x5f, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x6e, 0x76, 0x5f, 0x76, 0x61, 0x72, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x72, 0x65, 0x70, 0x6f, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x45, 0x6e, 0x76, 0x56, 0x61, 0x72, 0x1a, 0x3b, 0x0a, 0x0d, 0x42, 0x75, 0x69, 0x6c, 0x64,
	0x45, 0x6e, 0x76, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x1a, 0x39, 0x0a, 0x0b, 0x52, 0x75, 0x6e, 0x45, 0x6e, 0x76, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42,
	0x20, 0x5a, 0x1e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x61,
	0x64, 0x6f, 0x73, 0x6a, 0x75, 0x73, 0x62, 0x72, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f,
	0x72, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_structs_proto_rawDescOnce sync.Once
	file_structs_proto_rawDescData = file_structs_proto_rawDesc
)

func file_structs_proto_rawDescGZIP() []byte {
	file_structs_proto_rawDescOnce.Do(func() {
		file_structs_proto_rawDescData = protoimpl.X.CompressGZIP(file_structs_proto_rawDescData)
	})
	return file_structs_proto_rawDescData
}

var file_structs_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_structs_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_structs_proto_goTypes = []interface{}{
	(StageExecution_Status)(0),    // 0: StageExecution.Status
	(*PipelineExecution)(nil),     // 1: PipelineExecution
	(*PipelineDef)(nil),           // 2: PipelineDef
	(*StageExecution)(nil),        // 3: StageExecution
	(*StepExecution)(nil),         // 4: StepExecution
	(*StageDef)(nil),              // 5: StageDef
	nil,                           // 6: PipelineDef.DefaultBuildEnvEntry
	nil,                           // 7: PipelineDef.DefaultRunEnvEntry
	nil,                           // 8: StageDef.BuildEnvEntry
	nil,                           // 9: StageDef.RunEnvEntry
	(*timestamppb.Timestamp)(nil), // 10: google.protobuf.Timestamp
}
var file_structs_proto_depIdxs = []int32{
	2,  // 0: PipelineExecution.pipeline:type_name -> PipelineDef
	3,  // 1: PipelineExecution.results:type_name -> StageExecution
	6,  // 2: PipelineDef.default_build_env:type_name -> PipelineDef.DefaultBuildEnvEntry
	7,  // 3: PipelineDef.default_run_env:type_name -> PipelineDef.DefaultRunEnvEntry
	5,  // 4: PipelineDef.stages:type_name -> StageDef
	5,  // 5: PipelineDef.error_hander:type_name -> StageDef
	10, // 6: StageExecution.start_time:type_name -> google.protobuf.Timestamp
	10, // 7: StageExecution.finish_time:type_name -> google.protobuf.Timestamp
	4,  // 8: StageExecution.setup:type_name -> StepExecution
	4,  // 9: StageExecution.build:type_name -> StepExecution
	4,  // 10: StageExecution.run:type_name -> StepExecution
	4,  // 11: StageExecution.teardown:type_name -> StepExecution
	0,  // 12: StageExecution.status:type_name -> StageExecution.Status
	10, // 13: StepExecution.start_time:type_name -> google.protobuf.Timestamp
	10, // 14: StepExecution.finish_time:type_name -> google.protobuf.Timestamp
	8,  // 15: StageDef.build_env:type_name -> StageDef.BuildEnvEntry
	9,  // 16: StageDef.run_env:type_name -> StageDef.RunEnvEntry
	17, // [17:17] is the sub-list for method output_type
	17, // [17:17] is the sub-list for method input_type
	17, // [17:17] is the sub-list for extension type_name
	17, // [17:17] is the sub-list for extension extendee
	0,  // [0:17] is the sub-list for field type_name
}

func init() { file_structs_proto_init() }
func file_structs_proto_init() {
	if File_structs_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_structs_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PipelineExecution); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_structs_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PipelineDef); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_structs_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StageExecution); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_structs_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StepExecution); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_structs_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StageDef); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_structs_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_structs_proto_goTypes,
		DependencyIndexes: file_structs_proto_depIdxs,
		EnumInfos:         file_structs_proto_enumTypes,
		MessageInfos:      file_structs_proto_msgTypes,
	}.Build()
	File_structs_proto = out.File
	file_structs_proto_rawDesc = nil
	file_structs_proto_goTypes = nil
	file_structs_proto_depIdxs = nil
}
